import Cocoa

//MARK: (1)

//MARK: - –í–∞—Ä–∏–∞–Ω—Ç ‚Ññ1 (–ù–∞—á–∞–ª –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å –µ—Ä—É–Ω–¥—É¬†ü§ì)
//var arrayStudents = ["Max", "Ilya", "Pasha", "Tim", "Steve", "Joe", "Valera", "Stas", "Timur", "Cristian", "Vladimir", "Arnold"]
//
//arrayStudents.append("Nika")
//arrayStudents.append("Olya")
//arrayStudents.insert("Alyona", at: 12)
//arrayStudents.append(contentsOf: ["Nicole", "Vera", "Tanya", "Lena"])
//
//let list = arrayStudents.joined(separator: ", ")
//print(list)
//
//func removeStudents(name: [String]) -> [String] {
//    var students = name
//    if name.count > 6 {
//        students.removeFirst(6)
//    }
//    return students
//}
//
//
//let newList = removeStudents(name: arrayStudents)
//print(newList.joined(separator: ", "))


//MARK: - –í–∞—Ä–∏–∞–Ω—Ç ‚Ññ2 (–ü–æ-—É—Å–ª–æ–≤–∏—é –∑–∞–¥–∞—á–∏ —Ç–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–µ–π, –Ω–∞ –º–æ–π –≤–∑–≥–ª—è–¥)
var arrayStudents = ["Max", "Ilya", "Pasha", "Tim", "Steve", "Joe", "Valera", "Stas", "Timur", "Cristian", "Vladimir", "Arnold"]

arrayStudents.append("Nika")
arrayStudents.append("Olya")
arrayStudents.insert("Alyona", at: 5)
arrayStudents.append(contentsOf: ["Nicole", "Vera", "Tanya", "Lena"])

let list = arrayStudents.joined(separator: ", ")
print(list)

arrayStudents.remove(at: 0)
arrayStudents.remove(at: 1)
arrayStudents.remove(at: 3)
arrayStudents.remove(at: 4)
arrayStudents.remove(at: 5)
arrayStudents.remove(at: 4)
arrayStudents.remove(at: 5)
arrayStudents.remove(at: 3)
arrayStudents.remove(at: 10)

let newList = arrayStudents.joined(separator: ", ")
print(newList)
print("------------------------------------------")


//MARK: (2)
struct Site {
    var name: String?
    var surName: String?
    var nikName: String?
    var email: String?
    var password: String?
    
    func site() -> String? {
        guard let name = self.name, let surName = self.surName, let nikName = self.nikName, let email = self.email, let password = self.password else {
            return nil
        }
        return """
               –§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (\(surName))
               –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (\(name))
               –ù–∏–∫–ù–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (\(nikName))
               –ü–æ—á—Ç–∞ (\(email))
               –ü–∞—Ä–æ–ª—å (\(password))
               """
    }
}
var site = Site()
site.surName = "Kostuc"
site.name = "Ilya"
site.nikName = "iOSLomaster"
site.email = "ilyaKostuc@gmail.com"
site.password = "**********"

if let site = site.site() {
    print(site)
} else {
    print("–û—à–∏–±–∫–∞ - –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ")
}
print("------------------------------------------")


//MARK: (3)

//MARK: –ß–µ–ª–æ–≤–µ–∫
class Human {
    var weaponDamage: Int //–æ—Ä—É–∂–∏–µ–£—Ä–æ–Ω
    var health: Int //–∑–¥–æ—Ä–æ–≤—å–µ
    
    init(weaponDamage: Int = 4, health: Int = 9) {
        self.weaponDamage = weaponDamage
        self.health = health
    }
    
    func attackPlayer(_ damage: Int) -> String {
        if health > 0 {
            let newHealth = health - damage
            if newHealth > 0 {
                return "\(newHealth)"
            }
        }
        return "–ü–æ–≥–∏–±"
    }
}

//MARK: –û—Ä–∫
class Ork: Human {
    init() {
        super.init(weaponDamage: 3, health: 10)
    }
}

//MARK: –≠–ª—å—Ñ
class Elf: Human {
    init() {
        super.init(weaponDamage: 6, health: 8)
    }
}

//MARK: –û–±—å–µ–∫—Ç—ã
let human = Human()
human.health
human.weaponDamage


let ork = Ork()
ork.health
ork.weaponDamage

let elf = Elf()
elf.health
elf.weaponDamage

print("""
          RPG Warhammer 40,000

–ì–µ—Ä–æ–∏: –û—Ä–∫, –≠–ª—å—Ñ, –ß–µ–ª–æ–≤–µ–∫

–û—Ä–∫ - –∑–¥–æ—Ä–æ–≤—å–µ: \(ork.health), –∞—Ç–∞–∫–∞: \(ork.weaponDamage)
–≠–ª—å—Ñ - –∑–¥–æ—Ä–æ–≤—å–µ: \(elf.health), –∞—Ç–∞–∫–∞: \(elf.weaponDamage)
–ß–µ–ª–æ–≤–µ–∫ - –∑–¥–æ—Ä–æ–≤—å–µ: \(human.health), –∞—Ç–∞–∫–∞: \(human.weaponDamage)

""")

print("–†–∞—É–Ω–¥ ‚Ññ1")

let orkAttack = ork.weaponDamage
let elfAttack = elf.weaponDamage
let humanAttack = human.weaponDamage

print("""
      –•–æ–¥ –û—Ä–∫–∞:
      –û—Ä–∫ –∞—Ç–∞–∫—É–µ—Ç –≠–ª—å—Ñ–∞ –∏ –Ω–∞–Ω–æ—Å–∏—Ç \(orkAttack) —É—Ä–æ–Ω–∞, —É –≠–ª—å—Ñ–∞ –æ—Å—Ç–∞–ª–æ—Å—å \(elf.attackPlayer(orkAttack)) –∂–∏–∑–Ω–µ–π
      """)

print("""
      
      –•–æ–¥ –≠–ª—å—Ñ–∞:
      –≠–ª—å—Ñ –∞—Ç–∞–∫—É–µ—Ç –û—Ä–∫–∞ –∏ –Ω–∞–Ω–æ—Å–∏—Ç \(elfAttack) —É—Ä–æ–Ω–∞, —É –û—Ä–∫–∞ –æ—Å—Ç–∞–ª–æ—Å—å \(ork.attackPlayer(elfAttack)) –∂–∏–∑–Ω–µ–π
      """)

print("""
      
      –•–æ–¥ –ß–µ–ª–æ–≤–µ–∫–∞:
      –ß–µ–ª–æ–≤–µ–∫ –∞—Ç–∞–∫—É–µ—Ç –û—Ä–∫–∞ –∏ –Ω–∞–Ω–æ—Å–∏—Ç \(humanAttack) —É—Ä–æ–Ω–∞. –û—Ä–∫ \(ork.attackPlayer(ork.health))
      """)
















